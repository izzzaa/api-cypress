{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 5,
    "pending": 0,
    "failures": 2,
    "start": "2022-05-14T19:25:45.030Z",
    "end": "2022-05-14T19:25:46.823Z",
    "duration": 1620,
    "testsRegistered": 7,
    "passPercent": 71.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c909bb51-f800-4a0d-bff0-ce8b9b7254ea",
      "title": "",
      "fullFile": "cypress/integration/produtos.spec.js",
      "file": "cypress/integration/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c3da0d21-19d5-4bee-bc79-b6f789847cc1",
          "title": "Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validar Contrato",
              "fullTitle": "Produtos Validar Contrato",
              "timedOut": null,
              "duration": 292,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(Response => {\n  return _produtosContracts.default.validateAsync(Response.body);\n});",
              "err": {},
              "uuid": "39be9e28-dab1-4020-b7e1-3d30bb09c60a",
              "parentUUID": "c3da0d21-19d5-4bee-bc79-b6f789847cc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar Produtos",
              "fullTitle": "Produtos Listar Produtos",
              "timedOut": null,
              "duration": 412,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'Get',\n  url: 'http://localhost:3000/Produtos'\n}).then(Response => {\n  expect(Response.body.produtos[2].nome).to.equal('Iphone xr alterado');\n  expect(Response.status).to.equal(200); //espera que na resposta da api o status seja 200\n  expect(Response.body).to.have.property('produtos');\n  expect(Response.duration).to.be.lessThan(10);\n});",
              "err": {
                "message": "AssertionError: expected 'Produto Teste' to equal 'Iphone xr alterado'",
                "estack": "AssertionError: expected 'Produto Teste' to equal 'Iphone xr alterado'\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress\\integration\\produtos.spec.js:173:49)",
                "diff": "- 'Produto Teste'\n+ 'Iphone xr alterado'\n"
              },
              "uuid": "ec2bdd94-3397-482b-8245-4629d164f6cd",
              "parentUUID": "c3da0d21-19d5-4bee-bc79-b6f789847cc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar Produto",
              "fullTitle": "Produtos Cadastrar Produto",
              "timedOut": null,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto Notebook ${Math.floor(Math.random() * 10000000)}`;\ncy.request({\n  method: 'Post',\n  url: 'Produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 3350,\n    \"descricao\": \"Macbook\",\n    \"quantidade\": 3581\n  },\n  headers: {\n    authorization: token //colocando que a variavel token vai trazer a autorizacao\n  }\n}).then(Response => {\n  expect(Response.status).to.equal(201); //espera que na resposta da api o status seja 200\n  expect(Response.body.message).to.equal(\"Cadastro realizado com sucesso\");\n});",
              "err": {},
              "uuid": "d8f238c3-2646-4cb2-9322-8f51f20f7b7f",
              "parentUUID": "c3da0d21-19d5-4bee-bc79-b6f789847cc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve exibir critica ao cadastrar produto com nome j치 cadastrado",
              "fullTitle": "Produtos Deve exibir critica ao cadastrar produto com nome j치 cadastrado",
              "timedOut": null,
              "duration": 103,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, \"Produto Teste\", 250, \"descricao\", 180).then(Response => {\n  expect(Response.status).to.equal(400); //espera que na resposta da api o status seja 200\n  expect(Response.body.message).to.equal(\"J치 existe produto com esse nome\");\n});",
              "err": {},
              "uuid": "ab886fe4-19c7-45df-9de2-28fccad583f3",
              "parentUUID": "c3da0d21-19d5-4bee-bc79-b6f789847cc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Alterar Produto cadastrado",
              "fullTitle": "Produtos Alterar Produto cadastrado",
              "timedOut": null,
              "duration": 429,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(Response => {\n  let id = Response.body.produtos[0]._id; //criando variavel para pegar o id de um produto\n  cy.request({\n    method: \"Put\",\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token //colocando que a variavel token vai trazer a autorizacao\n    },\n    body: {\n      \"nome\": \"Produto editado\",\n      \"preco\": 470,\n      \"descricao\": \"Mouse\",\n      \"quantidade\": 381\n    }\n  });\n}).then(Response => {\n  expect(Response.status).to.equal(200); //espera que na resposta da api o status seja 200\n  expect(Response.body.message).to.equal(\"Registro alterado com sucesso\");\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:3000/produtos/4Afo1pn8VkpPrK8f\n\nThe response we received from your web server was:\n\n  > 400: Bad Request\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: PUT\nURL: http://localhost:3000/produtos/4Afo1pn8VkpPrK8f\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Iml6YUBxYS5jb20uYnIiLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNjUyNTU2MzQ1LCJleHAiOjE2NTI1NTY5NDV9.XbAZn5KXYN51JeOjsCdZOaoJR8Xt7a_UnmflkUeaY_Q\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/9.6.1 Chrome/94.0.4606.81 Electron/15.5.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 75\n}\nBody: {\"nome\":\"Produto editado\",\"preco\":470,\"descricao\":\"Mouse\",\"quantidade\":381}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 400 - Bad Request\nHeaders: {\n  \"access-control-allow-origin\": \"*\",\n  \"x-dns-prefetch-control\": \"off\",\n  \"x-frame-options\": \"SAMEORIGIN\",\n  \"strict-transport-security\": \"max-age=15552000; includeSubDomains\",\n  \"x-download-options\": \"noopen\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-moesif-transaction-id\": \"d6fd8834-b29f-44f9-914e-85d9c89e869e\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"content-length\": \"53\",\n  \"date\": \"Sat, 14 May 2022 19:25:46 GMT\",\n  \"connection\": \"keep-alive\",\n  \"keep-alive\": \"timeout=5\"\n}\nBody: {\n  \"message\": \"J치 existe produto com esse nome\"\n}\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:3000/produtos/4Afo1pn8VkpPrK8f\n\nThe response we received from your web server was:\n\n  > 400: Bad Request\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: PUT\nURL: http://localhost:3000/produtos/4Afo1pn8VkpPrK8f\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Iml6YUBxYS5jb20uYnIiLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNjUyNTU2MzQ1LCJleHAiOjE2NTI1NTY5NDV9.XbAZn5KXYN51JeOjsCdZOaoJR8Xt7a_UnmflkUeaY_Q\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/9.6.1 Chrome/94.0.4606.81 Electron/15.5.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 75\n}\nBody: {\"nome\":\"Produto editado\",\"preco\":470,\"descricao\":\"Mouse\",\"quantidade\":381}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 400 - Bad Request\nHeaders: {\n  \"access-control-allow-origin\": \"*\",\n  \"x-dns-prefetch-control\": \"off\",\n  \"x-frame-options\": \"SAMEORIGIN\",\n  \"strict-transport-security\": \"max-age=15552000; includeSubDomains\",\n  \"x-download-options\": \"noopen\",\n  \"x-content-type-options\": \"nosniff\",\n  \"x-xss-protection\": \"1; mode=block\",\n  \"x-moesif-transaction-id\": \"d6fd8834-b29f-44f9-914e-85d9c89e869e\",\n  \"content-type\": \"application/json; charset=utf-8\",\n  \"content-length\": \"53\",\n  \"date\": \"Sat, 14 May 2022 19:25:46 GMT\",\n  \"connection\": \"keep-alive\",\n  \"keep-alive\": \"timeout=5\"\n}\nBody: {\n  \"message\": \"J치 existe produto com esse nome\"\n}\n\n\nhttps://on.cypress.io/request\n    at http://localhost:3000/__cypress/runner/cypress_runner.js:165424:80\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:11139:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:3000/__cypress/tests?p=cypress\\integration\\produtos.spec.js:212:10)",
                "diff": null
              },
              "uuid": "7369ede4-6ede-454e-99d4-63234cc76451",
              "parentUUID": "c3da0d21-19d5-4bee-bc79-b6f789847cc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto Notebook ${Math.floor(Math.random() * 10000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"teste descricao\", 450).then(Response => {\n  let id = Response.body._id;\n  cy.request({\n    method: \"Put\",\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token //colocando que a variavel token vai trazer a autorizacao\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 470,\n      \"descricao\": \"Mouse\",\n      \"quantidade\": 381\n    }\n  });\n}).then(Response => {\n  expect(Response.status).to.equal(200); //espera que na resposta da api o status seja 200\n  expect(Response.body.message).to.equal(\"Registro alterado com sucesso\");\n});",
              "err": {},
              "uuid": "f5cce72d-3fc4-4d87-ac1e-13296c179fc7",
              "parentUUID": "c3da0d21-19d5-4bee-bc79-b6f789847cc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto cadastrado",
              "fullTitle": "Produtos Deve deletar um produto cadastrado",
              "timedOut": null,
              "duration": 133,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto Notebook ${Math.floor(Math.random() * 10000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"teste descricao\", 450).then(Response => {\n  let id = Response.body._id;\n  cy.request({\n    method: \"Delete\",\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token //colocando que a variavel token vai trazer a autorizacao\n    }\n  }).then(Response => {\n    expect(Response.body.message).to.equal(\"Registro exclu칤do com sucesso\");\n  });\n});",
              "err": {},
              "uuid": "0085a013-02fe-4f83-97a1-abab95becfb3",
              "parentUUID": "c3da0d21-19d5-4bee-bc79-b6f789847cc1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39be9e28-dab1-4020-b7e1-3d30bb09c60a",
            "d8f238c3-2646-4cb2-9322-8f51f20f7b7f",
            "ab886fe4-19c7-45df-9de2-28fccad583f3",
            "f5cce72d-3fc4-4d87-ac1e-13296c179fc7",
            "0085a013-02fe-4f83-97a1-abab95becfb3"
          ],
          "failures": [
            "ec2bdd94-3397-482b-8245-4629d164f6cd",
            "7369ede4-6ede-454e-99d4-63234cc76451"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1620,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}